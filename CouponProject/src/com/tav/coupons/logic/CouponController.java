package com.tav.coupons.logic;
import java.util.List;
import com.tav.coupons.beans.*; 
import com.tav.coupons.dao.*;
import com.tav.coupons.enums.CouponType;
import com.tav.coupons.enums.ErrorType;
import com.tav.coupons.exceptions.ApplicationException;
import com.tav.coupons.utilities.DateUtils;
import com.tav.coupons.utilities.InputValidationUtils;
public class CouponController {

	private CouponDao couponDao;
	private CompanyDao companyDao;
	private CustomerDao customerDao;

// ------------------------------------Constructor---------------------------------
	
	public CouponController () {

		couponDao = new CouponDao ();
		companyDao = new CompanyDao ();
		customerDao = new CustomerDao();
	}

// -----------------------------Creates a new coupon--------------------------------
	
	public long createCoupon (Coupon coupon) throws ApplicationException {
		
		if (couponDao.isCouponExists(coupon.getTitle())) {
			throw new ApplicationException(ErrorType.DATA_NOT_FOUND, "There is already a coupon with the same title.");
		}
		
		// Doesn't check if the company is the company that is logged-in (yet)
		if (!companyDao.isCompanyExists(coupon.getMotherCompany())) {
			throw new ApplicationException(ErrorType.DATA_NOT_FOUND, "The company you inserted isn't recorded in our database.");
		}
		  
		if (!InputValidationUtils.isDateValid(coupon.getEndDate()) || !InputValidationUtils.isDateValid(coupon.getStartDate())) {
			throw new ApplicationException(ErrorType.ILLEGAL_USER_INPUT, "The date you inserted doesn't follow the right format, please use dd/MM/yyyy");
		}
		
		
		long autoGeneratedId = couponDao.createCoupon(coupon);
		
		if (autoGeneratedId > 0) {
			System.out.println("A new coupon by the name " + coupon.getTitle() + " was created successfully!");
		}
		
		return autoGeneratedId;
		
	}
// ------------------------------------------------------------------------------------------
	
// ----------------------------------------Removes a coupon----------------------------------

	public void removeCoupon (long couponId) throws ApplicationException{

		if (!couponDao.isCouponExists(couponId)) {
			throw new ApplicationException(ErrorType.DATA_NOT_FOUND, "The coupon you're trying to delete couldn't be found.");
		}
			
		couponDao.removeCoupon(couponId);
		System.out.println("The coupon with the id " + couponId + " was removed.");

	}

// ------------------------------------------------------------------------------------------
	
// ---------------------------------------Updates a coupon-------------------------------
	
	public void updateCoupon (Coupon coupon) throws ApplicationException {

		if (!couponDao.isCouponExists(coupon.getId())) {
			throw new ApplicationException(ErrorType.DATA_NOT_FOUND, "The coupon you're trying to update couldn't be found.");
		}
		
		if (!InputValidationUtils.isDateValid(coupon.getEndDate())) {
			throw new ApplicationException(ErrorType.ILLEGAL_USER_INPUT, "The expiration date you inserted is invalid.");
		}
		
		couponDao.updateCoupon(coupon);
		System.out.println("The coupon by the title " + coupon.getTitle() + " was updated successfully!");
	}

// --------------------------------------------------------------------------------------------

//--------------------------------------Gets a coupon-----------------------------------------

	// Gets a specific coupon by it's id
	public Coupon getCoupon (long couponId) throws ApplicationException {
		
		Coupon coupon = couponDao.getCoupon(couponId);
		
		/*if (coupon == null) {
			throw new ApplicationException(ErrorType.DATA_NOT_FOUND, "The coupon you're trying to get couldn't be found.");
		}*/
		
		return coupon;
	}
	
	// Gets a specific coupon by it's title
		public Coupon getCoupon (String couponTitle) throws ApplicationException {

			Coupon coupon = couponDao.getCoupon(couponTitle);
			
			/*if (coupon == null) {
				throw new ApplicationException(ErrorType.DATA_NOT_FOUND, "The coupon you're trying to get couldn't be found.");
			}*/
			
			return coupon;
		}
	
	// Gets all the coupons that exist in the database
	public List <Coupon> getAllCoupons () throws ApplicationException {
		
			List <Coupon> allCoupons = couponDao.getAllCoupons();
			 
			if (allCoupons == null) {
				throw new ApplicationException(ErrorType.DATA_NOT_FOUND, "No coupons could be found.");
			}
			
			System.out.println("These are all the coupons we could find : " + allCoupons);
			return allCoupons;
	}
	
	// Gets a coupon by a specific CouponType (ENUM)
	public List <Coupon> getCouponsByType (CouponType couponType) throws ApplicationException {
		
		List <Coupon> allCouponsByType = couponDao.getCouponsByType(couponType);
		 
		if (allCouponsByType == null) {
			throw new ApplicationException (ErrorType.DATA_NOT_FOUND, "No coupons by the type " + couponType.toString() + " could be found.");
		}

		System.out.println("These are all the coupons by the type " + couponType.toString() + " : " + allCouponsByType);
		return allCouponsByType;
	}
	
	// Gets all coupons that a specific customer purchased
	public List <Coupon> getCouponsPurchasedByCustomer (long customerId) throws ApplicationException {
		
		if (!customerDao.isCustomerExists(customerId)) {
			throw new ApplicationException(ErrorType.DATA_NOT_FOUND, "The customer you're trying to fetch coupons from does not exist.");
		}
		
		System.out.println("These are all the coupons purchased bys " + customerId);
		for (Coupon coupon : couponDao.getPurchasedCoupons(customerId)) {
			System.out.println(coupon);
		}
		return couponDao.getPurchasedCoupons(customerId);
	}
	
	// Gets all the coupons that were made by a specific company
	public List<Coupon> getAllCouponsByCompany (String companyName) throws ApplicationException {
		
		List <Coupon> allCoupons = couponDao.getAllCouponsByCompany(companyName);
		 
		if (allCoupons == null) {
			throw new ApplicationException(ErrorType.DATA_NOT_FOUND, "No coupons could be found");
		}
		
		System.out.println("These are all the coupons that were made by" + companyName + " : " + allCoupons);
		return allCoupons;
	}
	
// ----------------------------------------Purchases a coupon----------------------------------

	// Uses a customer and a coupon in order to make a purchase
	// Should make it a safe function, everyone can make a coupon purchase
	public void purchaseCoupon (long customerId, long couponId) throws ApplicationException {

		System.out.println(customerId);
		System.out.println(couponId);
		
		CustomerController customerController = new CustomerController();
		
		Customer customer = customerController.getCustomer(customerId);
		Coupon coupon = getCoupon(couponId);
		
		if (!customerDao.isCustomerExists(customer.getId())) {
			throw new ApplicationException(ErrorType.DATA_NOT_FOUND, "The customer that is trying to purchase the coupon " + coupon.getTitle() + " does not exist!");
		}

		if (!couponDao.isCouponExists(coupon.getId())) {
			throw new ApplicationException(ErrorType.DATA_NOT_FOUND, "The coupon that customer " + customer.getCustomerName() + " is trying to purchase does not exist!");
		}

		// Checks if coupon has expired (Even though the program is supposed to clean the coupons up regularly, this is a double check)
		if (DateUtils.isDatePassed(coupon.getEndDate())) {
			throw new ApplicationException(ErrorType.OUT_OF_STOCK_OR_EXPIRED, "Sorry... " + coupon.getTitle() + " has expired.");
		}
		
		// Checks if the coupon is in stock
		if (couponDao.getCoupon(coupon.getId()).getAmount() <= 0) {
			throw new ApplicationException(ErrorType.OUT_OF_STOCK_OR_EXPIRED, "Sorry... " + coupon.getTitle() + " is out of stock.");
		}

		// A coupon that copies all of the purchased coupons details but decreases the amount by 1
		Coupon couponToUpdateAmount = new Coupon (coupon.getId(), coupon.getTitle(), coupon.getMotherCompany(), coupon.getStartDate(), coupon.getEndDate(), (coupon.getAmount() - 1), coupon.getType(), coupon.getMessage(), coupon.getPrice(), coupon.getImage());

		// Updates the coupon amount
		couponDao.updateCoupon(couponToUpdateAmount);

		couponDao.purchaseCoupon(customer.getId(), coupon.getId());
		System.out.println("A new purhcase has been recorded to the database!");
	}

// ----------------------------Deletes all expired coupons----------------------------------
	
	public void deleteExpiredCoupons () throws ApplicationException {
		
		couponDao.deleteExpiredCoupons(DateUtils.getCurrentDate());
	}

// ------------------------------------------------------------------------------------------
}
