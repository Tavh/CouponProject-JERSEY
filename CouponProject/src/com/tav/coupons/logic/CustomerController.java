package com.tav.coupons.logic;
import com.tav.coupons.beans.*; 

import java.util.List;

import javax.servlet.http.Cookie;

import com.tav.coupons.dao.*;
import com.tav.coupons.enums.ErrorType;
import com.tav.coupons.exceptions.ApplicationException;
import com.tav.coupons.utilities.*;

public class CustomerController implements IUser {

	private CustomerDao customerDao;

	// -----------------------------------Constructor-----------------------------------------

	public CustomerController () {
		customerDao = new CustomerDao();
	}

	// ---------------------------------------------------------------------------------------

	// ---------------------------------Creates a new customer--------------------------------

	public long createCustomer (Customer customer) throws ApplicationException {

		if (customerDao.isCustomerExists(customer.getEmail())) {
			throw new ApplicationException(ErrorType.DATA_NOT_FOUND, "The email you're trying to use already exists.");
		}

		if (!InputValidationUtils.isPasswordValid(customer.getPassword())) {
			throw new ApplicationException(ErrorType.ILLEGAL_USER_INPUT, "The password you inserted doesn't fit the required format.");
		}

		if (!InputValidationUtils.isEmailValid(customer.getEmail())) {
			throw new ApplicationException (ErrorType.ILLEGAL_USER_INPUT, "The email you're trying to use doesn't fit the required format");
		}

		if (!InputValidationUtils.isNameValid(customer.getCustomerName())) {
			throw new ApplicationException (ErrorType.ILLEGAL_USER_INPUT, "The name you're trying to use doesn't fit the required format");
		}

		long autoGeneratedId = customerDao.createCustomer(customer);

		if (autoGeneratedId > 0) {
			System.out.println("A new customer by the name " + customer.getCustomerName() + " was created successfully!");
		}

		return autoGeneratedId;

	}

	// ----------------------------------Removes a customer------------------------------------

	public void removeCustomer (long customerId) throws ApplicationException {

		if (!customerDao.isCustomerExists(customerId)) {
			throw new ApplicationException (ErrorType.DATA_NOT_FOUND, "The customer you're trying to delete couldn't be found.");
		}

		customerDao.removeCustomer(customerId);
		System.out.println("Customer number " + customerId + " was removed.");
	}

	// -------------------------------Updates a customer's details-----------------------------

	public void updateCustomer (UserDetails userDetails, Cookie[] cookies) throws ApplicationException {

		// This will store the currently active user in the application
		String currentActiveUsername = "None";
		
		// This for each loop checks if there actually is a cookie for a logged-in customer and if so, checks if it fits the one being updated
		for (Cookie c : cookies) {
			if (c.getName().equals("customerEmail")) {
				currentActiveUsername = c.getValue();
			}
		}
		
		if (currentActiveUsername.equals(userDetails.getEmail())) {
			
			Customer customer = new Customer(userDetails.getId(), userDetails.getUsername(), userDetails.getEmail(), userDetails.getPassword());
			
			if (!customerDao.isCustomerExists(customer.getId())) {
				throw new ApplicationException (ErrorType.DATA_NOT_FOUND, "The customer you're trying to update couldn't be found.");
			}

			customerDao.updateCustomer(customer);
			System.out.println("Customer " + customer.getEmail() + " was updated successfully!");
		} else {
			// If the logged-in user is different than the one they're trying to update, there is a strong chance they are trying to hack the application
			throw new ApplicationException (ErrorType.HACKING_ATTEMPT, "The customer that is logged-in is not the same as the one requested for update");
		}

	}

	// ----------------------------------------Getters-----------------------------------------

	// Gets a specific customer by id
	public Customer getCustomer (long customerId) throws ApplicationException {
		
		Customer customer = customerDao.getCustomer(customerId);
		
		/*if (customer == null) {
			throw new ApplicationException (ErrorType.DATA_NOT_FOUND, "The customer you're trying to access couldn't be found.");
		}*/

		return customer;
	}

	// Gets a specific customer by email
	public Customer getCustomer (String customerEmail) throws ApplicationException {
		
		Customer customer = customerDao.getCustomer(customerEmail);
		
		/*if (customer == null) {
			throw new ApplicationException (ErrorType.DATA_NOT_FOUND, "The customer you're trying to access couldn't be found.");
		}*/

		return customer;
	}

	// Gets all the customers that exist in the database
	public List<Customer> getAllCustomers () throws ApplicationException {

		List <Customer> allCustomers = customerDao.getAllCustomers();

		if (allCustomers == null) {
			throw new ApplicationException(ErrorType.DATA_NOT_FOUND, "No companies could be found.");
		}


		System.out.println("These are all the customers we could find : " + allCustomers);
		return allCustomers;
	}

	// -----------------------------------------------------------------------------------------

	// -------------------------Checks if customer login details are true----------------------

	@Override
	public boolean authenticate (String customerEmail, String customerPassword) throws ApplicationException {

		if (!customerDao.isCustomerExists(customerEmail)) {
			throw new ApplicationException (ErrorType.DATA_NOT_FOUND, "The email you inserted couldn't be found.");
		}
		
		if (!customerDao.getCustomer(customerEmail).getPassword().equals(customerPassword)) {
			throw new ApplicationException (ErrorType.ILLEGAL_USER_INPUT, "The password you inserted is wrong, please try again.");
		}
		return true;
	}
}

//-----------------------------------------------------------------------------------------
